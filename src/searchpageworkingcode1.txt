import React, { useState } from 'react';

const MAX_PAGE_NUMBERS_TO_SHOW = 5; // Maximum page numbers visible in pagination
const ROWS_PER_VIEWPORT = 6; // Rows visible without scrolling
const ITEMS_PER_PAGE = 20; // Total rows per page when scrolled

const ProspectTable = ({ prospects }) => {
  const [currentPage, setCurrentPage] = useState(1);

  // Calculate Total Pages
  const totalPages = Math.ceil(prospects.length / ITEMS_PER_PAGE);

  // Calculate Items for Current Page
  const indexOfLastItem = currentPage * ITEMS_PER_PAGE;
  const indexOfFirstItem = indexOfLastItem - ITEMS_PER_PAGE;
  const currentItems = prospects.slice(indexOfFirstItem, indexOfLastItem);

  // Change Page
  const paginate = (pageNumber) => {
    setCurrentPage(pageNumber);
  };

  // Render Page Numbers
  const visiblePageNumbers = () => {
    const start = Math.max(currentPage - 2, 1);
    const end = Math.min(start + MAX_PAGE_NUMBERS_TO_SHOW - 1, totalPages);

    const range = [];
    for (let i = start; i <= end; i++) {
      range.push(i);
    }
    return range;
  };

  return (
    <>
      <div className="overflow-x-auto shadow sm:rounded-lg">
        <div className="overflow-y-auto" style={{ maxHeight: `${ROWS_PER_VIEWPORT * 2.5}rem` }}>
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Name
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Company
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Email
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Title
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {currentItems.map((prospect, index) => (
                <tr key={index} className="hover:bg-gray-100">
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                    {`${prospect.salutation} ${prospect.firstname} ${prospect.lastname}`}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {prospect.companyname}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    <button
                      type="button"
                      onClick={() => alert(`Email ID: ${prospect.emailid}`)}
                      className="py-1 px-3 bg-blue-500 text-white rounded hover:bg-blue-700 focus:outline-none transition duration-300 ease-in-out"
                    >
                      Access Email
                    </button>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {prospect.jobtitle}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
      <div className="py-3 flex items-center justify-between border-t border-gray-200">
        <div className="flex-1 flex justify-between sm:hidden">
          <button onClick={() => paginate(Math.max(currentPage - 1, 1))} disabled={currentPage === 1} className="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
            Previous
          </button>
          <button onClick={() => paginate(Math.min(currentPage + 1, totalPages))} disabled={currentPage === totalPages} className="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
            Next
          </button>
        </div>
        <div className="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
          <div>
          <p className="text-sm text-gray-700">
              Showing <span className="font-medium">{indexOfFirstItem + 1}</span> to <span className="font-medium">{indexOfLastItem > prospects.length ? prospects.length : indexOfLastItem}</span> of <span className="font-medium">{prospects.length}</span> results
            </p>
          </div>
          <div>
            <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
              {currentPage > 1 && (
                <button onClick={() => paginate(1)} className="relative inline-flex items-center px-4 py-2 border text-sm font-medium bg-white text-gray-500 hover:bg-gray-50 border-gray-300">
                  First
                </button>
              )}
              {visiblePageNumbers().map((number) => (
                <button
                  key={number}
                  aria-current={currentPage === number ? 'page' : undefined}
                  onClick={() => paginate(number)}
                  className={`relative inline-flex items-center px-4 py-2 border text-sm font-medium ${currentPage === number ? 'bg-blue-500 text-white' : 'bg-white text-gray-500 hover:bg-gray-50'} border-gray-300`}
                >
                  {number}
                </button>
              ))}
              {currentPage < totalPages && (
                <button onClick={() => paginate(totalPages)} className="relative inline-flex items-center px-4 py-2 border text-sm font-medium bg-white text-gray-500 hover:bg-gray-50 border-gray-300">
                  Last
                </button>
              )}
            </nav>
          </div>
        </div>
      </div>
    </>
  );
};

export default ProspectTable;
