import { Fragment, useState } from 'react';
import { Dialog, Disclosure, Transition } from '@headlessui/react';
import { XMarkIcon, ChevronDownIcon, PlusIcon, MinusIcon } from '@heroicons/react/20/solid';
import Navbar from './Navbar';

// Your initial prospects data
const allProspects = [
  {
    id: 1,
    name: 'Emile Cordeau',
    company: 'Agropur',
    email: 'emile.cordeau@agropur.com',
    title: 'Chief Executive Officer',
    industry: 'Food & Agriculture',
  },
  {
    id: 2,
    name: 'Patrick Gingras',
    company: 'ADM Aéroports de Montréal',
    email: 'patrick.gingras@admtl.com',
    title: 'IT Solutions Architect',
    industry: 'Airlines and Aviation',
  },
  // Add more prospects here
];

const filters = [
  {
    id: 'industry',
    name: 'Industry',
    options: [
      { value: 'Airlines and Aviation', label: 'Airlines and Aviation' },
      { value: 'Food & Agriculture', label: 'Food & Agriculture' },
      { value: 'IT', label: 'IT' },
    ],
  },
  {
    id: 'title',
    name: 'Job Title',
    options: [
      { value: 'Deputy Director IT Projects Airport Operations', label: 'Deputy Director IT Projects Airport Operations' },
      { value: 'Team Manager - IT Solution Architect', label: 'Team Manager - IT Solution Architect' },
      { value: 'Deputy Director IT Enterprise Architecture', label: 'Deputy Director IT Enterprise Architecture' },
      { value: 'IT Solutions Architect', label: 'IT Solutions Architect' },
      { value: 'Chief Executive Officer', label: 'Chief Executive Officer' },
      { value: 'Director, IT - Business Analysis', label: 'Director, IT - Business Analysis' },
      { value: 'IT Service Desk Manager', label: 'IT Service Desk Manager' },
      { value: 'Food & Agriculture', label: 'Food & Agriculture' },
      { value: 'Software Engineer', label: 'Software Engineer' },

    ],
  },
];

export default function Example() {
  const [mobileFiltersOpen, setMobileFiltersOpen] = useState(false);
  const [selectedIndustries, setSelectedIndustries] = useState([]);
  const [selectedTitles, setSelectedTitles] = useState([]);
  const [companyName, setCompanyName] = useState('');

  // Function to handle industry filter selection
  const handleIndustrySelection = (selectedOption) => {
    setSelectedIndustries(prevSelected =>
      prevSelected.includes(selectedOption)
        ? prevSelected.filter(industry => industry !== selectedOption)
        : [...prevSelected, selectedOption]
    );
  };

  // Function to handle job title filter selection
  const handleTitleSelection = (selectedOption) => {
    setSelectedTitles(prevSelected =>
      prevSelected.includes(selectedOption)
        ? prevSelected.filter(title => title !== selectedOption)
        : [...prevSelected, selectedOption]
    );
  };

  // Function to handle company name input
  const handleCompanyNameInput = (event) => {
    setCompanyName(event.target.value);
  };

  // Filter the prospects based on selected filters and company name input
  const filteredProspects = allProspects.filter(prospect =>
    (selectedIndustries.length === 0 || selectedIndustries.includes(prospect.industry)) &&
    (selectedTitles.length === 0 || selectedTitles.includes(prospect.title)) &&
    (companyName === '' || prospect.company.toLowerCase().includes(companyName.toLowerCase()))
  );

  const fetchFilteredProspects = async () => {
    const response = await fetch('http://localhost:5000/api/v1/fetchLeads', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        // Include other headers as needed, e.g., for authentication
      },
      body: JSON.stringify({
        selectedIndustries: selectedIndustries,
        selectedTitles: selectedTitles,
        companyName: companyName,
      }),
    });
  
    if (response.ok) {
      const data = await response.json();
      console.log(data); // Handle the filtered prospects data
    } else {
      // Handle errors
      console.error('Failed to fetch prospects');
    }
  };
  
  fetchFilteredProspects();
  return (
    <>
      <Navbar />
      <div className="bg-white">
      
        <main className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
          <div className="flex items-baseline justify-between border-b border-gray-200 pb-6 pt-24">
            <h1 className="text-4xl font-bold tracking-tight text-gray-900">Prospects</h1>
          </div>

          <section aria-labelledby="prospects-heading" className="pb-24 pt-6">
            <h2 id="prospects-heading" className="sr-only">Prospects</h2>

            <div className="grid grid-cols-1 gap-x-8 gap-y-10 lg:grid-cols-4">
              {/* Filters */}
              <form className="hidden lg:block">
                {filters.map((section) => (
                  <Disclosure as="div" key={section.id} className="border-b border-gray-200 py-6">
                    {({ open }) => (
                      <>
                        <h3 className="-my-3 flow-root">
                          <Disclosure.Button className="flex w-full items-center justify-between bg-white py-3 text-sm text-gray-400 hover:text-gray-500">
                            <span className="font-medium text-gray-900">{section.name}</span>
                            <span className="ml-6 flex items-center">
                              {open ? (
                                <MinusIcon className="h-5 w-5" aria-hidden="true" />
                              ) : (
                                <PlusIcon className="h-5 w-5" aria-hidden="true" />
                              )}
                            </span>
                          </Disclosure.Button>
                        </h3>
                        <Disclosure.Panel className="pt-6">
                          <div className="space-y-4">
                            {section.options.map((option, optionIdx) => (
                              <div key={option.value} className="flex items-center">
                                <input
                                  id={`filter-${section.id}-${optionIdx}`}
                                  name={`${section.id}[]`}
                                  value={option.value}
                                  type="checkbox"
                                  checked={section.id === 'industry' ? selectedIndustries.includes(option.value) : selectedTitles.includes(option.value)}
                                  onChange={() => section.id === 'industry' ? handleIndustrySelection(option.value) : handleTitleSelection(option.value)}
                                  className="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500"
                                />
                                <label htmlFor={`filter-${section.id}-${optionIdx}`} className="ml-3 text-sm text-gray-600">
                                  {option.label}
                                </label>
                              </div>
                            ))}
                          </div>
                        </Disclosure.Panel>
                      </>
                    )}
                  </Disclosure>
                ))}
                <div className="pt-6">
                  <label htmlFor="company-name" className="block text-sm font-medium text-gray-700">Company Name</label>
                  <input
                    type="text"
                    name="companyName"
                    id="company-name"
                    className="mt-1 block w-full pl-3 pr-10 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                    placeholder="Search by company name"
                    onChange={handleCompanyNameInput}
                  />
                </div>
              </form>

              {/* Prospect grid */}
              <div className="lg:col-span-3">
                {filteredProspects.length > 0 ? (
                  <div className="overflow-hidden border-b border-gray-200 shadow sm:rounded-lg">
                    <table className="min-w-full divide-y divide-gray-200">
                      <thead className="bg-gray-50">
                        <tr>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Company</th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Title</th>
                          {/* Additional headers if needed */}
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y divide-gray-200">
                        {filteredProspects.map((prospect) => (
                          <tr key={prospect.id}>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{prospect.name}</td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{prospect.company}</td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{prospect.email}</td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{prospect.title}</td>
                            {/* Additional prospect data if needed */}
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                ) : (
                  <div className="text-center py-10">
                    <span className="text-gray-500">No prospects found. Try adjusting your filters.</span>
                  </div>
                )}
              </div>
            </div>
          </section>
        </main>
      </div>

    </>
  );
}
